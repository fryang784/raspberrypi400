Phys129L S22
HW7 p5
Richard Yang
2022/05/11
====================
Problem Description:
5. Fourier Analysis. 
Find a light source with periodic intensity, for example a dimmable LED 
flashlight, a dimmable phone light app or screen, or a fluorescent room light 
(some fluorescent lights will work, but others will not).
a. Using your solar cell and the program you wrote for the previous problem, 
   record the light from this source. Turn in the data file.
b. Write a new program that reads the data into a Numpy array from the disk 
   file and computes the power spectrum of the signal using 
   matplotlib.mlab.psd() or functions from numpy.fft .
c. Turn in an EPS plot of the power spectrum, and use it to identify the 
   fundamental frequency at which the light intensity varies.
Hints: See the psd spectrum.py and fft spectrum.py example programs.
You may find it necessary to suppress the zero-frequency (DC) component of the
power spectrum
====================

	There are 4 files in addition to this text file that are relevant to this problem: 
	---------------------------------------------------------------------------
		p5_hw7.py 				| the python program of this problem 
								| (hereby called "the program") 
		p5_hw7_data_file.txt 	| data file containing voltage measured
		p5_hw7.eps 				| EPS plot of voltage measured
		p5_hw7_power_spec.eps 	| EPS plot of the power spectrum of voltage
	---------------------------------------------------------------------------

	Among these files, p5_hw7.py is the program that performs Fourier Analysis, and is the program that is referred to as the "new program" in part b of the problem description. p5_hw7_data_file.txt is generated by p4_hw7.py, as specified by part a of the problem. Since part a simply says to use the program I wrote for the previous problem, which outputs both the text file containing the voltage measurement as well as its EPS plot, p5_hw7.eps thus came to existence. Now, this means the EPS plot for part c will necessarily be saved under a different name. Using the principle of "appropriateness" (See p4_hw7.txt), I chose to name this EPS file as "p5_hw7_power_spec.eps" . 

	I hope this demonstrates that the naming convention used for this problem is in line with the requirements set forth by the Homework Guidelines as well as by the specific problem at hand.  

	By looking at p5_hw7_power_spec.eps, one can clearly see a peak in the power at around 240 Hz. The voltage data is collected by placing my iPhone's screen with half brightness on top of the solar cell. The power amplitudes for frequency from -50Hz to +50Hz have been set to 0 since we are not interested in the DC offset. This means that iPhone X has a brightness PWM frequency of 240Hz, which is pretty low from what I expect. This number seem to correspond with other's finding on Google as well.   

Begin description of the program below:
-------------------

	The program has three functions: 

	---------------------------------------------------------------------------
		file_readlines  	| Read text file and return contents as a list of 
							| lines
		careful_savefig 	| save figure as eps, if filename does not yet exist
		fft_spectrum 		| returns the frequency and power spectrum 
	---------------------------------------------------------------------------

	The fft_spectrum function is constructed based on the fft_spectrum.py program by Prof. Lipman. It takes in a numpy array as the data to be Fourier Transformed, the Function range in seconds (FTIME), and the sample rate (FS). The number of sample points, npts = FTIME*FS, is needed to obtain the true frequency of the sample's power spectrum. 

	I chose to suppress the power spectrum with frequency 0 +- 50 Hz. The reason why I need to choose 50Hz as the width is because the original data acquisition time is rather small (1 second), which means the uncertainty associated with the frequency space will be large. This explains the relatively large spread in the power spectrum. Since the problem explicitly asked to use my program written for the previous problem, I sticked with the 1 second as the data acquisition time. Admittedly, a longer aquisition time would make the frequeny spread sharper.

--------------------
End of program description.
====================
End of solution.
