Phys129L S22
HW5 p5
Richard Yang
2022/04/30
====================
Problem Description:
5. Mandelbrot Set. 
A complex number c is in the Mandelbrot Set if upon repeated iteration the expression z_(n+1) = z_n**2 + c, with z_0 = 0, does not diverge. In other words, |z_n| remains bounded no matter the value of n. In typical illustrations, the complex plane is shown with the Mandelbrot Set in black and the surrounding points c colored according to the number n of iterations required for | z_n**2 + c | to exceed some chosen value.
Write a program that plots an interesting region of the complex plane in this fashion.
Note: a region containing the whole set is hardly the most interesting you can choose; try zooming in near the edges. Use a grid of 512x384 pixels, and a limit of 250 iterations per point. In other words, if | z_n**2 + c | is still below some small limit of your choosing (think about what a good choice might be) after 250 iterations, assume it is in the set.
Save your plot as a PostScript file (not .eps) and use the translate and scale operators to center the image on the page at a size that leaves 56-point horizontal margins. A good place to put these commands is immediately following the line
%%Page: 1 1
Convert the PostScript file to PDF using ps2pdf and turn in the PDF file with the code and text file for the problem.
Hints: You will probably find it useful to use a smaller grid until you have debugged and optimized your code. It will also help to include some print statements that notify you of the program's progress.
See cmapimg.py in $HOME/physrpi/python/ on your RPi for an example of plotting
points with a color map rather than explicit RGB values
====================

	The program relevant to this problem is titled "p5_hw5.py" (hereby called "the program")

	There are two ps files relevant to this problem. They are called: "p5_hw5_30Apr22_N250.ps" and "p5_hw5_30Apr22_edge_N250.ps". These two ps files each has its corresponding pdf files, with the ending '.pdf' in place of the '.ps'. 

	To configure the ps file such that the figure is centered and with the correct margin (about 56 point horizontally), I first scaled the figure by calculating the ratio of the desired x dimension with the current x dimension. Then, translation is done with some trials and errors. Lastly, the pdf file is generated by using ps2pdf shell command. 

Begin description of the program below:
--------------------

	The program defines a bunch of functions in the beginning of the script to better compartmentalize the procedure.

	Notably, in function get_M_map, a numpy meshgrid is used to easily access the cartesian coordinate at every point in the plane. The size of the plane is determined by the fixed dimension of pixels, which is a tuple that holds the number of pixels in x and y directions. In this way, all complex numbers defined in this meshgrid can be computed in the Mandelbrot equation in parallel (aka no need to iterate over each element of each row of each column, etc.) 

	Function display_cmap essentially is a modification of Prof. Lipman's cmapping.py, with careful save figure option added.

	The program allows repeated user input of maximum iteration number so that one can easily see the different numerical result for different iteration number. As a future step, it would be great if one can just zoom in on a figure generated by the python script, and the script will automatically re-calculate the simulation with the newly defined Xlim and Ylim. I have constructed the program with this idea in mind (hence they are all written as functions), but I haven't figured out a way to wire the properties of a currently displayed figure back to the program itself. 
	 
--------------------
End of program description.

====================
End of solution. 
