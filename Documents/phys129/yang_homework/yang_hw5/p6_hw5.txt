Phys129L S22
HW5 p6
Richard Yang
2022/04/29
====================
Problem Description:
6. PostScript Flower. Examine the code in $HOME/physrpi/ps/petal.ps on your RPi, and use the gv program to view the result.
Write a program in Python that takes as input from the user a number of petals, then writes to disk a PostScript program (a .ps file) that draws a flower with the specified number of non-overlapping, symmetrically placed petals. Your program may limit the number of petals to some reasonable range.
Extra credit will be given for a stem and leaves.
Hints: Remember you can use triple quotes to create multiple-line strings. Assemble your output as one large string, then use the appropriate file method to write it to disk. You can concatenate strings with +. I suggest you not try to write elegant PostScript code. Do all the work (for example, loops and calculations) in Python, and make the PostScript output as simple as possible.
====================

	The python script relevant to this problem is titled "p6_hw5.py" (hereby referred to as "the program").

	The resultant .ps script generated by the program is titled "p6_hw5_petal%_ddMmmyy.ps", where % stands for the number of petals, and the date of production is explicitly shown as well. 

	A copy of petal.ps is saved in this directory for convenience, though it is not required for the normal performance of the program.  

	Before describing my program, here are some useful notes I observed from petal.ps. 

	Line 26: cp1 ap cp2 ap ep2 ap curveto, shows that the cursor moves from ep1 (previous command) to position of cp1 first. Previously in the ps script, cp1 is defined as [ 55 65 ]. This means the one side of the petal goes from [0 0] to [55 65], which is an angle of 0.702 rad = 40.236 degrees away from the vertical direction. This means, a maximum of 4 petals can be drawn symmetrically with no overlapping, since by symmetry each petal needs about 80 degrees. To increase the number of petals, x scale has to be decreased. 
	
Begin description of the program below:
--------------------

	The script largely compiles the script of .ps file as a long string, which is named a "script" in the program, and writes it in the current directory. The structure of the .ps file is modified from petal.ps. 

	The first section defines some global variables and the the functions to be invoked in the later part of the program. The final script to be written out as a .ps file is separated into three part: Header, Prolog, and draw_gfun. Each returns a string, which is concatenated together to form the script. 

	The second section deals with user interaction, computation, and then compiling the script by invoking previously defined functions. Basic yet robust error handling is implemented. If the number of petals is too large such that the angle interval between each consecutive petal is larger than the angle of the span of the petal (roughly 80 degrees, see previous section of this txt file), then xscale is redefined based on the angle interval between each petal. In this way, there is no need to put a maximum for the number of petals. This program will always make sure there is no overlapping of petals (see 'p6_hw5_petal122_29Apr22.ps' for reference).

--------------------
End of program description.

====================
End of solution. 
