Phys129L S22
HW8 p2
Richard Yang
2022/05/19
====================
Problem Description:
2. Polynomial Fits. 
Write a program that generates a user-specified number N of uniformly 
distributed random points on a region of the x-y plane, with x and y both 
running from 0–100. Find fits to the set of points using polynomials of 
degree 1 (a line), N − 3,
and N − 1. Turn in an EPS plot of the specified region of the x-y plane 
showing the set of points and the fit curves, in four different colors. 
Your program may limit the value of N to some reasonable range, and you may 
use NumPy functions to do the fitting
====================

	There are 7 files in addition to this txt file that are relevant to this problem:

	---------------------------------------------------------------------------
	p2_hw.py 					| The python program relevant to this problem 
								| (hereby called "the program")
	p2_hw8_19May22_N3.eps 		| The EPS plot with number of random points
								| N = 3
	p2_hw8_19May22_N10.eps 		| EPS plot with N = 10
	p2_hw8_19May22_N50.eps 		| EPS plot with N = 50
	p2_hw8_19May22_N60.eps 		| EPS plot with N = 60
	p2_hw8_19May22_N75.eps 		| EPS plot with N = 75
	p2_hw8_19May22_N100.eps 	| EPS plot with N = 100
	---------------------------------------------------------------------------

	Each EPS file is the plot for a different number of random numbers. Although the problem prompt said to "Turn in an EPS plot [...]", which implies an singular EPS plot, I think the prompt does not necessarily limit the number of EPS plots to be only one. For the interest of testing how np.polyfit responds to higher degree of random points, I decided to explore this by generating these plots with various values for N. I believe my naming format for these files should be considered as "appropriate". 

-------------------
Begin description of the program below:

	To start with, the program has the option of seeding the random number or not. This option is very helpful for debugging, since by seeding np.random, the random numbers generated by each iteration of the script will be the same (corresponding to the same N). For convenience, I placed a switch for seeding at the top of the program. After the program has been debugged, I turned off the seeding option, and generated all the output EPS files. 

	The program prompts an user input for N, the number of random points to be placed on a cartesian grid. I have chosen to limit N to be between 3 and 100. The lower bound is because we are asked to fit the random points with N - 3 degree curve (in the case where N = 3, the fit is a flat line. See 'p2_hw8_19May22_N3.eps'). The upper maximum is more for convenience, as in the program could handle a higher N if so desired, but I do not think those cases reveal much more insights to the basic principle of this program. Plus it is also very slow to run with a large N. Basic error handling has been implemented.   

	The program then generates an array of random numbers between 0 and 100 for the x coordinate as well as the y coordinate. 

	The program uses np.polyfit to get the polynomial fit with the specified polynomial degrees. 

	Lastly, the random numbers and the fits are plotted with different colors using matplotlib.subplots(). The resultant figure is properly labeled, titled with the value of N, and carefully saved (i.e. only if such file does not currently exists).	

--------------------
End of program description.
====================
End of solution.
