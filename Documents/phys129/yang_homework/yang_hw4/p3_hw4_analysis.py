#!/usr/bin/env python3

#
# p3_hw4_analysis.py - Execution speed, analyze data generated by 
#                      p3_hw4_generate.py, which is saved as a csv file in 
#                      p3_hw4_data.csv
#
# 21Apr22   Richard Yang
#

#%% 

import numpy as np
import csv

# Load the csv file:
# Load csv files:
csvPATH = '/home/pi/Documents/phys129/yang_homework/yang_hw4/p3_hw4_data.csv'
csvFile = open(csvPATH)         # create a file object 
csvreader = csv.reader(csvFile) # create a csv reader object

file = []
for row in csvreader:
    file.append(row)
    
data = np.array(file)
data = data.astype(float)       # convert each element from str to float
#%%
data = data.transpose()         # so each row corresponds to repeated 
                                # measurements of one type of operation
                                
                                
# a. Nothing (a pass statement)
# b. Addition of two float variables
# c. Multiplication of two float variables
# d. Division of two float variables
# e. Integer division of two variables
# f. Appending one number to a list. Does this depend on the length of the 
#    list? get a list of strings as plain string
# g. Call to a function that does nothing (contains only a pass statement)
# h. Call to a function that adds two float variables      
                                
c = 0                                

print('Prelim-check: time taken for updating time variable')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nObjective a: pass')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nObjective b: add two floats')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nObjective c: multiply two floats')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1


print('\nObjective d: divide two floats')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1


print('\nObjective e: integer division of two floats')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1


print('\nObjective f part 1: append into a short list')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1


print('\nObjective f part 2: append into a long list')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nObjective g: call a function that does nothing')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nObjective h: call a function that adds two floats')
print('    mean = %.3e, std = %.3e' % (np.mean(data[c]) , np.std(data[c]) ))
c += 1

print('\nNumber of trials = %d' % len(data[0]))


